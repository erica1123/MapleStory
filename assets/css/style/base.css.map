{"version":3,"sources":["style/base.sass","mixins/_mixin.sass"],"names":[],"mappings":"AAEA;EACE,SAAS;EACT,WAAW,EAAA;;AACb;EAEE,cAAc;EACd,WAAW,EAAA;EAHb;IC6JE,WAAW;IACX,WAAW;IACX,cAAc,EAAA;;AD3JhB;;;;;;;;;;;;;EAaE,SAAS;EACT,UAAU;EACV,SAAS;EACT,aAAa;EACb,wBAAwB;ECMzB,8BDL+B;UCK/B,sBDL+B,EAAA;;AAChC;;EAEE,cAAc,EAAA;;AAChB;EACE,+DAA+D,EAAA;;AACjE;EAEI,UAAU,EAAA;;AACd;EACE,SAAS;EACT,UAAU;EACV,cAAc;EACd,WAAW;EACX,cAAc,EAAA;;AAChB;EACE,SAAS;EACT,UAAU;EACV,gBAAgB,EAAA;;AAClB;EACE,qBAAqB;EACrB,cAAc,EAAA;;ACsDf;EDnDC;ICGD,wBAA2C;IAC3C,gEAAyF;IACzF,UDJqB,EAAA;EACpB;ICCD,0BAA2C;IAC3C,kEAAyF;IACzF,UDFqB,EAAA,EAAA;;ACgDrB;EDnDC;ICGD,wBAA2C;IAC3C,gEAAyF;IACzF,UDJqB,EAAA;EACpB;ICCD,0BAA2C;IAC3C,kEAAyF;IACzF,UDFqB,EAAA,EAAA","file":"base.css","sourcesContent":["@import '../mixins/mixins';\n\nhtml, body {\n  margin: 0;\n  width: 100%; }\n.container {\n  @include clearfix;\n  margin: 0 auto;\n  width: 100%; }\nspan, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font: inherit;\n  vertical-align: baseline;\n  @include box-sizing(border-box); }\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section, main {\n  display: block; }\ninput, select, table, th, td, input, textarea, button {\n  font-family: Arial, Helvetica, \"Microsoft JhengHei\", sans-serif; }\ninput, button, textarea {\n  &:focus {\n    outline: 0; } }\nimg {\n  border: 0;\n  outline: 0;\n  display: block;\n  width: 100%;\n  margin: 0 auto; }\nul,li,ol {\n  margin: 0;\n  padding: 0;\n  list-style: none; }\na {\n  text-decoration: none;\n  display: block; }\n\n@include keyframes(fadein) {\n  from {\n    @include opacity(0); }\n  to {\n    @include opacity(1); } }\n","// --------------------------------\n// Default Mixins\n// --------------------------------\n@mixin background-gradient($startColor: #3C3C3C, $endColor: #999999) {\n\tbackground-color: $startColor;\n\tbackground-image: linear-gradient(top, $startColor, $endColor);\n\tfilter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}'); }\n\n@mixin background-horizontal($startColor: #3C3C3C, $endColor: #999999) {\n\tbackground-color: $startColor;\n\tbackground-image: linear-gradient(left, $startColor, $endColor);\n\tfilter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$startColor}', endColorStr='#{$endColor}', gradientType='1'); }\n\n@mixin background-radial($startColor: #FFFFFF, $startPos: 0%, $endColor: #000000, $endPos: 100%) {\n\tbackground: radial-gradient(ellipse at center, $startColor $startPos, $endColor $endPos); }\n\n@mixin border-radius($radius: 5px) {\n\tborder-radius: $radius; }\n\n@mixin border-radius-separate($topLeftRadius: 5px, $topRightRadius: 5px, $bottomLeftRadius: 5px, $bottomRightRadius: 5px) {\n\tborder-top-left-radius: $topLeftRadius;\n\tborder-top-right-radius: $topRightRadius;\n\tborder-bottom-right-radius: $bottomRightRadius;\n\tborder-bottom-left-radius: $bottomLeftRadius; }\n\n@mixin box-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4), $inset: \"\") {\n\t@if $inset != \"\" {\n\t\tbox-shadow: $inset $x $y $blur $color; }\n\t@else {\n\t\tbox-shadow: $x $y $blur $color; } }\n\n@mixin box-sizing($type: border-box) {\n\tbox-sizing: $type; }\n\n@mixin columns($count: 3, $gap: 10) {\n\tcolumn-coun: $count;\n\tcolumn-ga: $gap; }\n\n@mixin double-borders($colorOne: #3C3C3C, $colorTwo: #999999, $radius: 0) {\n\tborder: 1px solid $colorOne;\n\tbox-shadow: 0 0 0 1px $colorTwo;\n\t@include border-radius($radius); }\n\n@mixin flip($scaleX: -1) {\n\ttransform: scaleX($scaleX);\n\tfilter: FlipH;\n\t-ms-filter: \"FlipH\"; }\n\n@mixin font-face($fontFamily: myFont, $eotFileSrc: \"myFont.eot\", $woffFileSrc: \"myFont.woff\", $ttfFileSrc: \"myFont.ttf\", $svgFileSrc: \"myFont.svg\", $svgFontID: \"#myFont\") {\n\tfont-family: $fontFamily;\n\tsrc: url($eotFileSrc) format(\"eot\"), url($woffFileSrc) format(\"woff\"), url($ttfFileSrc) format(\"truetype\"), url($svgFileSrc + $svgFontID) format(\"svg\"); }\n\n@mixin opacity($opacity: 0.5) {\n\t$opacityMultiplied: $opacity * 100;\n\tfilter: alpha(opacity = $opacityMultiplied);\n\t-ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=\" + $opacityMultiplied + \")\";\n\topacity: $opacity; }\n\n@mixin outline-radius($radius: 5px) {\n\toutline-radius: $radius; }\n\n@mixin resize($direction: both) {\n\tresize: $direction; }\n\n@mixin rotate($deg: 0, $m11: 0, $m12: 0, $m21: 0, $m22: 0) {\n\ttransform: rotate($deg + deg);\n\tfilter: progid:DXImageTransform.Microsoft.Matrix( M11=#{$m11}, M12=#{$m12}, M21=#{$m21}, M22=#{$m22}, sizingMethod='auto expand');\n\tzoom: 1; }\n\n@mixin transform($params) {\n\ttransform: $params; }\n\n@mixin scale($scale) {\n\t@include transform(scale($scale)); }\n\n@mixin translate ($x, $y) {\n\t@include transform(translate($x, $y)); }\n\n@mixin skew ($x, $y) {\n\t@include transform(skew(#{$x}deg, #{$y}deg)); }\n\n@mixin text-shadow($x: 2px, $y: 2px, $blur: 5px, $color: rgba(0, 0, 0, 0.4)) {\n\ttext-shadow: $x $y $blur $color; }\n\n@mixin translate3d($x, $y, $z) {\n\ttransform: translate3d($x, $y, $z); }\n\n@mixin transform-origin($params) {\n\ttransform-origin: $params; }\n\n@mixin transition($property: all, $duration: .3s, $ease: linear) {\n\ttransition: $property $duration $ease; }\n\n@mixin transform-delay($params) {\n\ttransform-delay: $params; }\n\n@mixin triple-borders($colorOne: #3C3C3C, $colorTwo: #999999, $colorThree: #000000, $radius: 0) {\n\tborder: 1px solid $colorOne;\n\t@include border-radius($radius);\n\t@include box-shadow(0 0 0 1px #{$colorTwo}, 0 0 0 2px #{$colorThree}); }\n\n@mixin keyframes($animation-name) {\n\t@keyframes #{$animation-name} {\n\t\t@content; } }\n\n@mixin animation($params) {\n\tanimation: $params; }\n\n@mixin arrow($direction, $color, $size) {\n\tdisplay: block;\n\theight: 0;\n\twidth: 0;\n\t@if $direction == 'top' {\n\t\tborder-left: $size solid transparent;\n\t\tborder-right: $size solid transparent;\n\t\tborder-bottom: $size solid $color; }\n\t@else if $direction == 'right' {\n\t\tborder-top: $size solid transparent;\n\t\tborder-bottom: $size solid transparent;\n\t\tborder-left: $size solid $color; }\n\t@else if $direction == 'bottom' {\n\t\tborder-top: $size solid $color;\n\t\tborder-right: $size solid transparent;\n\t\tborder-left: $size solid transparent; }\n\t@else if $direction == 'left' {\n\t\tborder-top: $size solid transparent;\n\t\tborder-right: $size solid $color;\n\t\tborder-bottom: $size solid transparent; }\n\t@else if $direction == 'top-left' {\n\t\tborder-top: $size solid $color;\n\t\tborder-right: $size solid transparent; }\n\t@else if $direction == 'top-right' {\n\t\tborder-top: $size solid $color;\n\t\tborder-left: $size solid transparent; }\n\t@else if $direction == 'bottom-left' {\n\t\tborder-bottom: $size solid $color;\n\t\tborder-right: $size solid transparent; }\n\t@else if $direction == 'bottom-right' {\n\t\tborder-bottom: $size solid $color;\n\t\tborder-left: $size solid transparent; } }\n\n@mixin position($position, $args) {\n\t@each $o in top right bottom left {\n\t\t$i: index($args, $o);\n\t\t@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {\n\t\t\t#{$o}: nth($args, $i + 1); } }\n\tposition: $position; }\n\n@mixin absolute($args) {\n\t@include position(absolute, $args); }\n\n@mixin fixed($args) {\n\t@include position(fixed, $args); }\n\n@mixin relative($args) {\n\t@include position(relative, $args); }\n\n// --------------------------------\n// Custom Mixins\n// --------------------------------\n@mixin clearfix {\n\t&:after {\n\t\tcontent: '';\n\t\tclear: both;\n\t\tdisplay: block; } }\n\n@mixin size($width, $height: null) {\n\twidth: $width;\n\theight: $height; }\n\n@mixin flex($justify: center, $align: center) {\n\tdisplay: flex;\n\tjustify-content: $justify;\n\talign-items: $align; }\n\n@mixin bgColors($color, $lightness: 0) {\n\tbackground: scale-color($color, $lightness); }\n\n@mixin valign {\n\t@include absolute(top 50%);\n\t@include transform(translateY(-50%)); }\n@mixin halign {\n\t@include absolute(left 50%);\n\t@include transform(translateX(-50%)); }\n@mixin centeralign {\n\t@include absolute(top 50% left 50%);\n\t@include transform(translate(-50%, -50%)); }\n\n@mixin margin($args) {\n\t@if type-of(nth($args, 1)) == number or nth($args, 1) == 'auto' {\n\t\tmargin: $args; }\n\t@else {\n\t\t@each $o in top right bottom left {\n\t\t\t$i: index($args, $o);\n\t\t\t@if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {\n\t\t\t\tmargin-#{$o}: nth($args, $i + 1); } } } }\n\n@mixin padding($args) {\n\t@if type-of(nth($args, 1)) == number {\n\t\tpadding: $args;\n\t\t@each $key in $args {\n\t\t\t$index: index($args, $key);\n\t\t\t@if $index and type-of(nth($args, $index)) != number {\n\t\t\t\t@error '#{$key} 數值有誤'; } } }\n\t@else {\n\t\t@each $key in top right bottom left {\n\t\t\t$index: index($args, $key);\n\t\t\t@if $index and $index + 1 <= length($args) and type-of(nth($args, $index + 1)) == number {\n\t\t\t\tpadding-#{$key}: nth($args, $index + 1); }\n\t\t\t@else if $index and type-of(nth($args, $index + 1)) != number {\n\t\t\t\t@error '#{$key} 數值有誤'; } } } }\n\n@function makelongshadow($color) {\n\t$val: 0px 0px $color;\n\t@for $i from 1 through 15 {\n\t\t$val: #{$val}, #{-$i}px #{$i}px #{rgba($color, 0.01)}; }\n\t@return $val; }\n\n@function makelongshadow-pc($color) {\n\t$val: 0px 0px $color;\n\t@for $i from 1 through 32 {\n\t\t$val: #{$val}, #{-$i}px #{$i}px #{rgba($color, 0.01)}; }\n\t@return $val; }\n\n@mixin flat-shadow($color) {\n\tbox-shadow: makelongshadow($color); }\n\n@mixin flat-shadow-pc($color) {\n\tbox-shadow: makelongshadow-pc($color); }\n"]}